// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: tag.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatePropagationClient is the client API for StatePropagation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatePropagationClient interface {
	Propagation(ctx context.Context, opts ...grpc.CallOption) (StatePropagation_PropagationClient, error)
}

type statePropagationClient struct {
	cc grpc.ClientConnInterface
}

func NewStatePropagationClient(cc grpc.ClientConnInterface) StatePropagationClient {
	return &statePropagationClient{cc}
}

func (c *statePropagationClient) Propagation(ctx context.Context, opts ...grpc.CallOption) (StatePropagation_PropagationClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatePropagation_ServiceDesc.Streams[0], "/protocol.StatePropagation/Propagation", opts...)
	if err != nil {
		return nil, err
	}
	x := &statePropagationPropagationClient{stream}
	return x, nil
}

type StatePropagation_PropagationClient interface {
	Send(*State) error
	Recv() (*State, error)
	grpc.ClientStream
}

type statePropagationPropagationClient struct {
	grpc.ClientStream
}

func (x *statePropagationPropagationClient) Send(m *State) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statePropagationPropagationClient) Recv() (*State, error) {
	m := new(State)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatePropagationServer is the server API for StatePropagation service.
// All implementations must embed UnimplementedStatePropagationServer
// for forward compatibility
type StatePropagationServer interface {
	Propagation(StatePropagation_PropagationServer) error
	mustEmbedUnimplementedStatePropagationServer()
}

// UnimplementedStatePropagationServer must be embedded to have forward compatible implementations.
type UnimplementedStatePropagationServer struct {
}

func (UnimplementedStatePropagationServer) Propagation(StatePropagation_PropagationServer) error {
	return status.Errorf(codes.Unimplemented, "method Propagation not implemented")
}
func (UnimplementedStatePropagationServer) mustEmbedUnimplementedStatePropagationServer() {}

// UnsafeStatePropagationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatePropagationServer will
// result in compilation errors.
type UnsafeStatePropagationServer interface {
	mustEmbedUnimplementedStatePropagationServer()
}

func RegisterStatePropagationServer(s grpc.ServiceRegistrar, srv StatePropagationServer) {
	s.RegisterService(&StatePropagation_ServiceDesc, srv)
}

func _StatePropagation_Propagation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatePropagationServer).Propagation(&statePropagationPropagationServer{stream})
}

type StatePropagation_PropagationServer interface {
	Send(*State) error
	Recv() (*State, error)
	grpc.ServerStream
}

type statePropagationPropagationServer struct {
	grpc.ServerStream
}

func (x *statePropagationPropagationServer) Send(m *State) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statePropagationPropagationServer) Recv() (*State, error) {
	m := new(State)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatePropagation_ServiceDesc is the grpc.ServiceDesc for StatePropagation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatePropagation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.StatePropagation",
	HandlerType: (*StatePropagationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Propagation",
			Handler:       _StatePropagation_Propagation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tag.proto",
}
