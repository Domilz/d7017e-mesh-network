asyncapi: 2.6.0
defaultContentType: &defaultContentType application/json
tags:
  - name: External
info:
  contact:
    name: Epiroc Mining Intelligence support
    url: https://www.epiroc.com
    email: support-SWT@epiroc.com
  title: Reference Point State
  version: 1.0.0
  description: |
    Unified API for centralized reference point management.

    Note that all operations are defined in the perspective of some reference point provider, and stubs are generated in the perspective of a client consumer. Meaning, read "__subscribe on x/y/z__" as in "__reference point backend will subscribe on x/y/z__" and generated stub will be "__I as a client needs to publish to x/y/z__". For details: https://www.asyncapi.com/blog/publish-subscribe-semantics.
servers:
  RabbitMQ-AMQP:
    url: 'amqps://amqp.{domain}'
    description: Mobilaris RabbitMQ Broker
    variables:
      domain: &domainInfo
        description: Domain URL
        examples:
          - heimdall-staging.cloud.epiroc.com
          - atlas-staging.cloud.epiroc.com
    protocol: amqp
    protocolVersion: 0.9.1
  RabbitMQ-MQTT:
    url: 'mqtt://mqtt.{domain}'
    variables:
      domain: *domainInfo
    protocol: mqtt
    protocolVersion: 0.1.0
channels:
  v1.reference-point.cmd.post:
    description: Topic for requesting to create a reference point. All type-appropriate reference point fields are relevant, except uuid, which should be generated by the reference point provider. In addition, the created and updated fields are not mandatory. If one is omitted, the other one will be used for both. If both are omitted, the timestamp of the message will be used.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.cmd.post
          durable: true
          exclusive: false
          autoDelete: false
        exchange: &topicExchange
          name: amq.topic
          type: topic
          durable: true
          autoDelete: false
          vhost: /
        bindingVersion: &amqpBindingVersion 0.2.0
    subscribe:
      operationId: referencePointPostCmdOperation
      bindings: &defaultOperationBindings
        mqtt:
          qos: 2
          retain: false
          bindingVersion: 0.1.0
          note: When using MQTT with the RabbitMQ broker, the dots in the topic (which separate the levels in AMQP) should be replaced by slashes. E.g. a client using MQTT should publish to v1/reference-point/cmd/post instead of v1.reference-point.cmd.post and subscribe to v1/reference-point/event/update instead of v1.reference-point.event.update. The MQTT plugin for RabbitMQ translates the MQTT format to the AMQP format and vice versa.
      message:
        $ref: '#/components/messages/ReferencePointModifyCmd'
  v1.reference-point.cmd.put:
    description: Topic for requesting to completely update a reference point. All type-appropriate reference point fields are relevant.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.cmd.put
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    subscribe:
      operationId: referencePointPutCmdOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointModifyCmd'
  v1.reference-point.cmd.patch:
    description: Topic for requesting to partially update a reference point. Any reference point fields that should be modified should be specified, in addition to an unaltered uuid.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.cmd.patch
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    subscribe:
      operationId: referencePointPatchCmdOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointModifyCmd'
  v1.reference-point.cmd.delete:
    description: Topic for requesting to delete a reference point. Exactly one unique reference point field should be specified.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.cmd.delete
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    subscribe:
      operationId: referencePointDeleteCmdOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointModifyCmd'
  v1.reference-point.cmd.snapshot:
    description: Topic for requesting a reference point snapshot to be published to some topic. Note that the snapshot can be filtered by type and RP ID.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.cmd.snapshot
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    subscribe:
      operationId: referencePointSnapshotCmdOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointSnapshotCmd'
  v1.reference-point.event.update:
    description: Topic to which reference point update events are published. Queues bound to this should be durable and have a HA policy. Note that the message payload is the same for snapshot. See explanation and suggestions under the suggested snapshot response topic.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.event.update
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    publish:
      operationId: referencePointUpdateEventOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointUpdateEvent'
  v1.reference-point.response.operation.service.domain:
    description: Suggested topic to which the result of a reference point modification would be published. This can be used to acquire the UUID of a reference point after a POST operation, check the actual resulting reference point et.c. All operations should return the full resulting reference point, except DELETE, which of course returns the last known state of the reference point.
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.response.operation.service.domain
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    publish:
      operationId: referencePointModifyResponseOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointModifyResponse'
  v1.reference-point.response.snapshot.service.domain:
    description: Suggested topic to which a reference point snapshot would be published. The payload is the same as that of the update event. In order for a service to build a complete image of the reference point state and keep it up-to-date, it should start from a clean cache, subscribe to updates and save them internally, request a snapshot, receive the snapshot and apply it to the cache, discard all updates with an older timestamp than that of the snapshot and then apply the rest of the updates to the cache. Snapshots can be distinguished from updates by their correlation ID. (Updates don't have one, since they're not associated with any request.)
    bindings:
      amqp:
        is: routingKey
        queue:
          name: v1.reference-point.response.snapshot.service.domain
          durable: true
          exclusive: false
          autoDelete: false
        exchange: *topicExchange
        bindingVersion: *amqpBindingVersion
    publish:
      operationId: referencePointSnapshotResponseOperation
      bindings: *defaultOperationBindings
      message:
        $ref: '#/components/messages/ReferencePointUpdateEvent'
components:
  messages:
    ReferencePointModifyCmd:
      contentType: *defaultContentType
      payload:
        $ref: '#/components/schemas/ReferencePointModifyCmd'
    ReferencePointSnapshotCmd:
      contentType: *defaultContentType
      payload:
        $ref: '#/components/schemas/ReferencePointSnapshotCmd'
    ReferencePointUpdateEvent:
      contentType: *defaultContentType
      payload:
        $ref: '#/components/schemas/ReferencePointUpdateEvent'
    ReferencePointModifyResponse:
      contentType: *defaultContentType
      payload:
        $ref: '#/components/schemas/ReferencePointModifyResponse'
  schemas:
    ReferencePointSnapshotCmd:
      description: Request to publish a snapshot.
      required:
        - replyTo
        - timestamp
        - correlationId
      properties:
        replyTo:
          type: string
          description: The topic the result will be published to.
          example: v1.reference-point.response.snapshot.vtb.atlas-staging.cloud.epiroc.com
        correlationId:
          type: string
          format: uuid
          description: ID that will be present in the corresponding update event published by the provider.
        type:
          $ref: '#/components/schemas/ReferencePointType'
        prefix:
          description: Filter by RP ID prefix. Note that this requires more complex cache logic on the client side, since the RP ID is mutable.
          type: string
          example: 'aa:bb:cc'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    ReferencePointUpdateEvent:
      description: RP event.
      required:
        - timestamp
        - correlationId
        - operation
        - operands
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        correlationId:
          $ref: '#/components/schemas/CorrelationId'
        operation:
          $ref: '#/components/schemas/Operation'
        operands:
          description: Array of reference points.
          type: array
          items:
            $ref: '#/components/schemas/ReferencePoint'
        error:
          $ref: '#/components/schemas/Error'
    Error:
      type: object
      description: Indication of an error.
      required:
        - code
      properties:
        code:
          $ref: '#/components/schemas/HttpErrorCode'
        message:
          type: string
          description: Message that describes any error that may have arisen. It should pertain to the error code. This message should not contain stack traces or errors internal to the RP provider, to reduce the risk of divulging information about vulnerabilities in said application. If the error is of such a nature that the resulting payload would be inaccurate, the payload (or other corresponding field) should be undefined, except in cases where the payload would be incomplete. This is to ensure at least partial functionality in case of an error.
      additionalProperties: false
    HttpErrorCode:
      type: integer
      description: Code that indicates an error in an attempted operation. Only error HTTP codes are used. In the case of an internal error (500-range), the provider logs should be investigated.
    CorrelationId:
      type: string
      format: uuid
      description: ID that will be used in the response to a request to alleviate matching responses to requests on the client side.
    ReferencePointModifyCmd:
      description: Request to make changes to a reference point.
      required:
        - timestamp
        - replyTo
        - correlationId
        - operation
        - operand
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        replyTo:
          type: string
          description: The topic the result will be published to.
          example: v1.reference-point.response.post.vtb.atlas-staging.cloud.epiroc.com
        correlationId:
          $ref: '#/components/schemas/CorrelationId'
        operand:
          $ref: '#/components/schemas/ReferencePoint'
    ReferencePointModifyResponse:
      type: object
      description: Response to a request to make changes to a reference point.
      required:
        - timestamp
        - correlationId
        - errors
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        correlationId:
          type: string
          format: uuid
        result:
          $ref: '#/components/schemas/ReferencePoint'
        error:
          $ref: '#/components/schemas/Error'
      additionalProperties: false
    ReferencePoint:
      description: Contains the state of an RP. Not all fields are necessary for all operations.
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique and immutable.
        rpId:
          type: string
          description: 'MAC address or other ID of a device. MACs are formatted as aa:bb.cc:dd:ee:f1. Unique.'
          example: 'aa:bb:cc:dd:ee:f1'
        name:
          type: string
        description:
          type: string
        createTime:
          $ref: '#/components/schemas/Timestamp'
        updateTime:
          $ref: '#/components/schemas/Timestamp'
        location:
          $ref: '#/components/schemas/Location'
        type:
          $ref: '#/components/schemas/ReferencePointType'
        wifiProperties:
          $ref: '#/components/schemas/ReferencePointWifiProperties'
        bleProperties:
          $ref: '#/components/schemas/ReferencePointBleProperties'
        lteProperties:
          $ref: '#/components/schemas/ReferencePointLteProperties'
        vendor:
          type: string
        vendorProperties:
          type: object
      additionalProperties: false
    ReferencePointType:
      description: Type of reference point.
      enum:
        - WIFI
        - BLE
        - LTE
        - UNKNOWN
      type: string
      additionalProperties: false
    ReferencePointWifiProperties:
      type: object
      description: Only applicable when reference point type is WIFI.
      properties:
        online:
          type: boolean
        locationStatus:
          $ref: '#/components/schemas/ReferencePointWifiLocationStatus'
        ip:
          type: string
          format: ipv4
          description: Unique.
      additionalProperties: false
    ReferencePointWifiLocationStatus:
      type: string
      enum:
        - NORMAL
        - ESTIMATED
        - WRONG
    ReferencePointBleProperties:
      type: object
      description: Only applicable when reference point type is BLE.
      properties:
        active:
          type: boolean
        batteryPercentage:
          type: number
          minimum: 0
          maximum: 100
      additionalProperties: false
    ReferencePointLteProperties:
      type: object
      description: Only applicable when reference point type is LTE.
    Location:
      description: XYZ coordinates
      required:
        - x
        - y
        - z
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number
      additionalProperties: false
    Operation:
      description: REST-like operation type.
      enum:
        - POST
        - PUT
        - PATCH
        - DELETE
      type: string
    Timestamp:
      type: object
      description: Seconds and nanoseconds at UTC since 1970-01-01 00:00:00.
      required:
        - seconds
        - nanos
      properties:
        seconds:
          type: integer
          description: Unix timestamp, which is the number of seconds at UTC since 1970-01-01 00:00:00. Although some implementations may use 32-bit integers to represent this, it is highly recommended that you use a 64-bit integer, since 32 bits will only last for a few more years at the time of writing.
          minimum: 0
          maximum: 9223372036854775807
          example: 1639658351
        nanos:
          type: integer
          description: There is no guarantee that all implementations support nanosecond precision.
          minimum: 0
          maximum: 999999999
          example: 329000000
      additionalProperties: false
